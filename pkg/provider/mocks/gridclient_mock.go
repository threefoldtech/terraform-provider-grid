// Code generated by MockGen. DO NOT EDIT.
// Source: /home/omar/go/pkg/mod/github.com/threefoldtech/grid_proxy_server@v1.0.0-rc8.0.20220602103306-6cb365a329b2/pkg/client/grid_client.go

// Package mock_client is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/threefoldtech/grid_proxy_server/pkg/types"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Contracts mocks base method.
func (m *MockClient) Contracts(filter types.ContractFilter, pagination types.Limit) ([]types.Contract, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contracts", filter, pagination)
	ret0, _ := ret[0].([]types.Contract)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Contracts indicates an expected call of Contracts.
func (mr *MockClientMockRecorder) Contracts(filter, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contracts", reflect.TypeOf((*MockClient)(nil).Contracts), filter, pagination)
}

// Counters mocks base method.
func (m *MockClient) Counters(filter types.StatsFilter) (types.Counters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Counters", filter)
	ret0, _ := ret[0].(types.Counters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Counters indicates an expected call of Counters.
func (mr *MockClientMockRecorder) Counters(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Counters", reflect.TypeOf((*MockClient)(nil).Counters), filter)
}

// Farms mocks base method.
func (m *MockClient) Farms(filter types.FarmFilter, pagination types.Limit) ([]types.Farm, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Farms", filter, pagination)
	ret0, _ := ret[0].([]types.Farm)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Farms indicates an expected call of Farms.
func (mr *MockClientMockRecorder) Farms(filter, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Farms", reflect.TypeOf((*MockClient)(nil).Farms), filter, pagination)
}

// Node mocks base method.
func (m *MockClient) Node(nodeID uint32) (types.NodeWithNestedCapacity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Node", nodeID)
	ret0, _ := ret[0].(types.NodeWithNestedCapacity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Node indicates an expected call of Node.
func (mr *MockClientMockRecorder) Node(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockClient)(nil).Node), nodeID)
}

// NodeStatus mocks base method.
func (m *MockClient) NodeStatus(nodeID uint32) (types.NodeStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeStatus", nodeID)
	ret0, _ := ret[0].(types.NodeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeStatus indicates an expected call of NodeStatus.
func (mr *MockClientMockRecorder) NodeStatus(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeStatus", reflect.TypeOf((*MockClient)(nil).NodeStatus), nodeID)
}

// Nodes mocks base method.
func (m *MockClient) Nodes(filter types.NodeFilter, pagination types.Limit) ([]types.Node, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nodes", filter, pagination)
	ret0, _ := ret[0].([]types.Node)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Nodes indicates an expected call of Nodes.
func (mr *MockClientMockRecorder) Nodes(filter, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockClient)(nil).Nodes), filter, pagination)
}

// Ping mocks base method.
func (m *MockClient) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockClientMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockClient)(nil).Ping))
}

// Twins mocks base method.
func (m *MockClient) Twins(filter types.TwinFilter, pagination types.Limit) ([]types.Twin, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Twins", filter, pagination)
	ret0, _ := ret[0].([]types.Twin)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Twins indicates an expected call of Twins.
func (mr *MockClientMockRecorder) Twins(filter, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Twins", reflect.TypeOf((*MockClient)(nil).Twins), filter, pagination)
}
