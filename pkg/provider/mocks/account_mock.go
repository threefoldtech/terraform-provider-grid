// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../pkg/substrates/substrate-dev/account.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/centrifuge/go-substrate-rpc-client/v4/types"
	gomock "github.com/golang/mock/gomock"
	subkey "github.com/vedhavyas/go-subkey"
)

// MockIdentity is a mock of Identity interface.
type MockIdentity struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityMockRecorder
}

// MockIdentityMockRecorder is the mock recorder for MockIdentity.
type MockIdentityMockRecorder struct {
	mock *MockIdentity
}

// NewMockIdentity creates a new mock instance.
func NewMockIdentity(ctrl *gomock.Controller) *MockIdentity {
	mock := &MockIdentity{ctrl: ctrl}
	mock.recorder = &MockIdentityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentity) EXPECT() *MockIdentityMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockIdentity) Address() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockIdentityMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockIdentity)(nil).Address))
}

// KeyPair mocks base method.
func (m *MockIdentity) KeyPair() (subkey.KeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyPair")
	ret0, _ := ret[0].(subkey.KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyPair indicates an expected call of KeyPair.
func (mr *MockIdentityMockRecorder) KeyPair() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyPair", reflect.TypeOf((*MockIdentity)(nil).KeyPair))
}

// MultiSignature mocks base method.
func (m *MockIdentity) MultiSignature(sig []byte) types.MultiSignature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiSignature", sig)
	ret0, _ := ret[0].(types.MultiSignature)
	return ret0
}

// MultiSignature indicates an expected call of MultiSignature.
func (mr *MockIdentityMockRecorder) MultiSignature(sig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiSignature", reflect.TypeOf((*MockIdentity)(nil).MultiSignature), sig)
}

// PublicKey mocks base method.
func (m *MockIdentity) PublicKey() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// PublicKey indicates an expected call of PublicKey.
func (mr *MockIdentityMockRecorder) PublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockIdentity)(nil).PublicKey))
}

// Sign mocks base method.
func (m *MockIdentity) Sign(data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockIdentityMockRecorder) Sign(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockIdentity)(nil).Sign), data)
}

// Type mocks base method.
func (m *MockIdentity) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockIdentityMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockIdentity)(nil).Type))
}

// URI mocks base method.
func (m *MockIdentity) URI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URI")
	ret0, _ := ret[0].(string)
	return ret0
}

// URI indicates an expected call of URI.
func (mr *MockIdentityMockRecorder) URI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URI", reflect.TypeOf((*MockIdentity)(nil).URI))
}
