// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/subi/substrate.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/centrifuge/go-substrate-rpc-client/v4/types"
	gomock "github.com/golang/mock/gomock"
	substrate "github.com/threefoldtech/substrate-client"
)

// MockSubstrate is a mock of Substrate interface.
type MockSubstrate struct {
	ctrl     *gomock.Controller
	recorder *MockSubstrateMockRecorder
}

// MockSubstrateMockRecorder is the mock recorder for MockSubstrate.
type MockSubstrateMockRecorder struct {
	mock *MockSubstrate
}

// NewMockSubstrate creates a new mock instance.
func NewMockSubstrate(ctrl *gomock.Controller) *MockSubstrate {
	mock := &MockSubstrate{ctrl: ctrl}
	mock.recorder = &MockSubstrateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubstrate) EXPECT() *MockSubstrateMockRecorder {
	return m.recorder
}

// CancelContract mocks base method.
func (m *MockSubstrate) CancelContract(identity substrate.Identity, contract uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelContract", identity, contract)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelContract indicates an expected call of CancelContract.
func (mr *MockSubstrateMockRecorder) CancelContract(identity, contract interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelContract", reflect.TypeOf((*MockSubstrate)(nil).CancelContract), identity, contract)
}

// CancelDeployment mocks base method.
func (m *MockSubstrate) CancelDeployment(identity substrate.Identity, deploymentID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelDeployment", identity, deploymentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelDeployment indicates an expected call of CancelDeployment.
func (mr *MockSubstrateMockRecorder) CancelDeployment(identity, deploymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDeployment", reflect.TypeOf((*MockSubstrate)(nil).CancelDeployment), identity, deploymentID)
}

// Close mocks base method.
func (m *MockSubstrate) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSubstrateMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSubstrate)(nil).Close))
}

// CreateCapacityReservationContract mocks base method.
func (m *MockSubstrate) CreateCapacityReservationContract(identity substrate.Identity, farm uint32, policy substrate.CapacityReservationPolicy, solutionProviderID *uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCapacityReservationContract", identity, farm, policy, solutionProviderID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCapacityReservationContract indicates an expected call of CreateCapacityReservationContract.
func (mr *MockSubstrateMockRecorder) CreateCapacityReservationContract(identity, farm, policy, solutionProviderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCapacityReservationContract", reflect.TypeOf((*MockSubstrate)(nil).CreateCapacityReservationContract), identity, farm, policy, solutionProviderID)
}

// CreateDeployment mocks base method.
func (m *MockSubstrate) CreateDeployment(identity substrate.Identity, capacityReservationContractID uint64, hash substrate.HexHash, data string, resources substrate.Resources, publicIPs uint32) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeployment", identity, capacityReservationContractID, hash, data, resources, publicIPs)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeployment indicates an expected call of CreateDeployment.
func (mr *MockSubstrateMockRecorder) CreateDeployment(identity, capacityReservationContractID, hash, data, resources, publicIPs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockSubstrate)(nil).CreateDeployment), identity, capacityReservationContractID, hash, data, resources, publicIPs)
}

// CreateGroup mocks base method.
func (m *MockSubstrate) CreateGroup(identity substrate.Identity) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", identity)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockSubstrateMockRecorder) CreateGroup(identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockSubstrate)(nil).CreateGroup), identity)
}

// CreateNameContract mocks base method.
func (m *MockSubstrate) CreateNameContract(identity substrate.Identity, name string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNameContract", identity, name)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNameContract indicates an expected call of CreateNameContract.
func (mr *MockSubstrateMockRecorder) CreateNameContract(identity, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNameContract", reflect.TypeOf((*MockSubstrate)(nil).CreateNameContract), identity, name)
}

// DeleteGroup mocks base method.
func (m *MockSubstrate) DeleteGroup(identity substrate.Identity, groupID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", identity, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockSubstrateMockRecorder) DeleteGroup(identity, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockSubstrate)(nil).DeleteGroup), identity, groupID)
}

// GetAccount mocks base method.
func (m *MockSubstrate) GetAccount(identity substrate.Identity) (types.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", identity)
	ret0, _ := ret[0].(types.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockSubstrateMockRecorder) GetAccount(identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockSubstrate)(nil).GetAccount), identity)
}

// GetContract mocks base method.
func (m *MockSubstrate) GetContract(id uint64) (*substrate.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract", id)
	ret0, _ := ret[0].(*substrate.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContract indicates an expected call of GetContract.
func (mr *MockSubstrateMockRecorder) GetContract(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract", reflect.TypeOf((*MockSubstrate)(nil).GetContract), id)
}

// GetDeployment mocks base method.
func (m *MockSubstrate) GetDeployment(id uint64) (*substrate.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", id)
	ret0, _ := ret[0].(*substrate.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockSubstrateMockRecorder) GetDeployment(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockSubstrate)(nil).GetDeployment), id)
}

// GetGroup mocks base method.
func (m *MockSubstrate) GetGroup(id uint64) (*substrate.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", id)
	ret0, _ := ret[0].(*substrate.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockSubstrateMockRecorder) GetGroup(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockSubstrate)(nil).GetGroup), id)
}

// GetNode mocks base method.
func (m *MockSubstrate) GetNode(id uint32) (*substrate.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", id)
	ret0, _ := ret[0].(*substrate.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockSubstrateMockRecorder) GetNode(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockSubstrate)(nil).GetNode), id)
}

// GetTwin mocks base method.
func (m *MockSubstrate) GetTwin(id uint32) (*substrate.Twin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTwin", id)
	ret0, _ := ret[0].(*substrate.Twin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTwin indicates an expected call of GetTwin.
func (mr *MockSubstrateMockRecorder) GetTwin(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTwin", reflect.TypeOf((*MockSubstrate)(nil).GetTwin), id)
}

// GetTwinByPubKey mocks base method.
func (m *MockSubstrate) GetTwinByPubKey(pk []byte) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTwinByPubKey", pk)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTwinByPubKey indicates an expected call of GetTwinByPubKey.
func (mr *MockSubstrateMockRecorder) GetTwinByPubKey(pk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTwinByPubKey", reflect.TypeOf((*MockSubstrate)(nil).GetTwinByPubKey), pk)
}

// UpdateCapacityReservationContract mocks base method.
func (m *MockSubstrate) UpdateCapacityReservationContract(identity substrate.Identity, capID uint64, resources substrate.Resources) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCapacityReservationContract", identity, capID, resources)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCapacityReservationContract indicates an expected call of UpdateCapacityReservationContract.
func (mr *MockSubstrateMockRecorder) UpdateCapacityReservationContract(identity, capID, resources interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCapacityReservationContract", reflect.TypeOf((*MockSubstrate)(nil).UpdateCapacityReservationContract), identity, capID, resources)
}

// UpdateDeployment mocks base method.
func (m *MockSubstrate) UpdateDeployment(identity substrate.Identity, id uint64, hash substrate.HexHash, data string, resources *substrate.Resources) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeployment", identity, id, hash, data, resources)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeployment indicates an expected call of UpdateDeployment.
func (mr *MockSubstrateMockRecorder) UpdateDeployment(identity, id, hash, data, resources interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeployment", reflect.TypeOf((*MockSubstrate)(nil).UpdateDeployment), identity, id, hash, data, resources)
}
